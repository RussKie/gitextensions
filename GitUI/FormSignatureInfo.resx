<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAA
        AABnZ2cBZ2dnTGdnZ89nZ2f/Z2dn/mdnZ9NnZ2dqZ2dnAwAAAABnZ2cDZ2dnvGdnZ/5nZ2f/Z2dn/mdn
        Z/xnZ2dEZ2dnSGdnZ/ZnZ2f9Z2dn6mdnZ+pnZ2f9Z2dn/WdnZ3tnZ2cBZ2dnA2dnZ7xnZ2eyZ2dn6Gdn
        Z6BnZ2f5Z2dnRGdnZ8NnZ2f8Z2dnXmdnZwVnZ2cFZ2dnTGdnZ+9nZ2fxZ2dnBmdnZwNnZ2e8Z2dng2dn
        Z9VnZ2dkZ2dn92dnZ0RnZ2f3Z2dnxWdnZwNnZ2cJZ2dnI2dnZwtnZ2enZ2dn+2dnZyJnZ2cDZ2dnvGdn
        Z4BnZ2cFZ2dnB2dnZ/dnZ2dEZ2dn62dnZ9RnZ2cKZ2dnQWdnZ/ZnZ2dGZ2dnxGdnZ/FnZ2cGZ2dnA2dn
        Z7xnZ2eAAAAAAGdnaAVnZ2j3Z2doRGdnZ6xnZ2f+Z2dnwWdnZ0ZnZ2f7Z2dnz2dnZ/1nZ2eWZ2dnAlmZ
        VgNZmla8WJxVjFG5TAEzPs0SQ0qu+ENKrkNnZ2clZ2dn2WdnZ/hnZ2dHZ2dn+2dnZ/5nZ2f+Z2dn92dn
        ZyNRuUwBUblMhlG5TOZQtVAvLTnajC052uwtOdoZLTnaJDxFvDBWWYp2Rk2oP1dbhoNXW4aEV1uGhFdb
        hoJYW4USAAAAAFG5TBBRuE28UblM6UB8kJcuO9dRLTnaAS052vstOdr7LTna+y052vstOdr7LTna+y05
        2vstOdr3LTnaIwAAAAAtOdoULz/ToUukY6FRuUz4UblMaVG5TAEtOdq8LTnavC052rwtO9i/LTvYvy05
        2rwtOdq8LTnauS052hotOdoBLTnaii052uIwQ88dUblMfFG5TPBRuUwZLTnaAy052gNDhYUHULdOu1C3
        TrtDhYUHLTnaAy052gMAAAAAQ0quA0NKrrxBSbKMPnWYAVG5TEVRuUz6UblMfFG5TARRuUwEUblMCVG5
        TPpRuUz6UblMCVG5TARRuUwEUblMAWdnaANnZ2i8Z2dogGdoZwFStU0dUbhMxFG5TEBRuUzbUblM21G5
        TNxRuUz+UblM/lG5TNxRuUzbUblM2FG5TB5nZ2cDZ2dnvGdnZ85nZ2eeZ2dnnmdpZp9nZ2cqUblM21G5
        TNtRuUzcUblM/lG5TP5RuUzcUblM21G5TNhRuUweZ2dnA2dnZ7xnZ2fOZ2dnnmdnZ55nZ2ecZ2dnKlG5
        TARRuUwEUblMCVG5TPpRuUz6UblMCVG5TARRuUwEUblMAWdnZwNnZ2e8Z2dngGdnZwFnZ2cBZ2dnAQAA
        AAAAAAAAAAAAAFG5TAVRuUz6UblM+lG5TAUAAAAAAAAAAAAAAABnZ2cDZ2dnvGdnZ4AAAAAAAAAAAAAA
        AAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAABAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAAA
        AAAAAQAAw48AAA==
</value>
  </data>
</root>